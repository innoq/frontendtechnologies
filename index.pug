<!DOCTYPE html>
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Frontend Technologies - Integration Guide for Web-based Services
    link(rel="stylesheet", href="/css/innoq-bootstrap-theme.css")
    link(rel="stylesheet", href="/css/globals.css")
    link(rel="stylesheet", href="/css/colors.css")
    link(rel="stylesheet", href="/css/topic-range.css")
    link(rel="stylesheet", href="/css/app.css")

  body
    a.innoq-logo(href="https://innoq.com")
      img(src="https://assets.website-files.com/5ce672a39e1ab48163e902a5/5cead0e15abdf65af550f85f_innoq-logo--neg.svg", alt="INNOQ")

    main
      h1 Frontend Technologies - Integration Guide for Web-based Services

      p.
        Modern web-based digital solutions nowadays consist often of a multitude of services that build up together what
        we think is the final product. To re-integrate such services into a seemless product experience can be a complex task
        with a multitude of different possibilities on how to achieve that goal.

      p.
        The range of different integration techniques starts with simple linking or form interactions between different applications,
        goes over injecting content parts of other services in the content of another service, so called transclusion,
        to completly integrating various API resources into a monolithic Frontend-Application, often referred to as Single Page Applications.

      h2 Integration Techniques and Coupling

      p.
        Beside advantages like higher flexibility and therefore better adaptability to a users needs Web-based user interfaces
        provide many advantages build in into the HTTP protocol. One of those, and a huge part of the success of REST based applications
        is the lose coupling between services. Lose coupling in terms of robustness against outages of related services,
        but also in terms of flexible formats like HTML or JSON, that are commonly used and that are easily extendible.

      p.
        In terms of coupling the HTML format had a big advantage for the integration as the integrating client does not need
        to know about the semantic structure of the content. Clients could just integrate the content into their HTML pages
        and rely on the Document Object Model or DOM to build up a seemless web experience. Think of iFrames and similar and
        how they do not know anything about the internals of what they contain.

      p.
        In contrast to that many client-side integration techniques rely on JSON as exchange format to tunnel data to the client.
        The JSON then can be used for the control flow of the client, but also for filling client-side templates to render HTML content.
        This rendering though relies on the knowledge of the structure of the transfered data and has therefore a stronger coupling
        than its is simpler cousin of HTML transcludes.

      p.
        In many modern frontend frameworks this robustness

      ft-topic-range(label-low="(lose)" label-high="(strong)")
        ft-topic-range-label Coupling

        ul
          li.range-item
            span
              strong No Integration
              = " "
              | (Decoupled Standalone Applications, with no knowledge about eachother)
          li.range-item
            span
              strong Integration via Links or Forms
              = " ("
              a(href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a") &lt;a&gt;
              = " or "
              a(href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form") &lt;form&gt;
              = ") with Page Change included"
          li.range-item.group-1-offset
            span
              strong Integration via iFrames
              = " ("
              a(href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe") &lt;iframe&gt;
              = ")"
          li.range-item.group-1-offset
            span
              strong Integration via
                = " "
                a(href="https://httpd.apache.org/docs/current/howto/ssi.html#:~:text=SSI%20(Server%20Side%20Includes)%20are,program%2C%20or%20other%20dynamic%20technology.") SSI
                = " / "
                a(href="https://www.w3.org/TR/esi-lang/") ESI
          li.range-item.group-1-offset
            span
              strong Integration via Clientside Includes
              = " "
              = "(Content-Retrieval as HTML by JS, see e.g. "
              a(href="https://roca-style.org/libraries.html") ROCA
              =")"
          li.range-item.group-1-offset
            span
              strong Integration via Clientside Include
              = " "
              | Content-Retrieval as structured Data (e.g. JSON) and render inside of Client Application by JS
          li.range-item.group-2-offset
            span
              strong Rich Components in a server-driven Web-App
              sup 1
              = " "
              | Content-Retrieval as structured Data (e.g. JSON) and render inside of Client Application by JS
          li.range-item.group-2-offset
            span
              strong Singlepage Framework
              sup 2
              = " "
              | loading self contained Modules from other Systems including Rendering Logic
          li.range-item
            span
              strong Singlepage Framework
              sup 2
              = " "
              | composing all Backend Resources in one Frontend
          //- TODO: bad hack ... but ft-range group needs to be in the ul because of grid :/
          li.ft-range-group.group-1.transclusion-label
            span transclusion
          li.ft-range-group.group-2.microfrontend-label
            span microfrontends

      ol.definition
        li without Client-Side routing
        li SPA in the means of a JS heavy framework with (!!) Client-side Routing

    include includes/footer
